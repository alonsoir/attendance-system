[tool.poetry]
name = "attendance-system"
version = "0.1.0"
description = "A system for managing student attendance using AI and WhatsApp"
authors = ["Alonso Isidoro Román <alonsoir@gmail.com>"]
packages = [{include = "backend"}]
license = "Proprietary"
repository = "https://github.com/alonsoir/attendance-system"

[tool.poetry.dependencies]
python = ">=3.10.15,<3.14"
# API Framework y servidor
fastapi = "^0.115.6"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
gunicorn = "^22.0.0"

# Base de datos y ORM
sqlalchemy = {extras = ["asyncio"], version = "^2.0.23"}
alembic = "^1.12.1"
asyncpg = "^0.29.0"
sqlalchemy-utils = "^0.41.2"

# Validación y configuración
pydantic = {extras = ["email"], version = "^2.5.1"}
pydantic-settings = "^2.1.0"
python-dotenv = "^1.0.0"
email-validator = "^2.1.0.post1"

# Seguridad y autenticación
python-jose = "^3.3.0"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-multipart = "^0.0.20"
bcrypt = "^4.0.1"

# Comunicación asíncrona y websockets
aiohttp = "^3.9.1"
websockets = "^12.0"
httpx = ">=0.27,<0.29"

# Cache y almacenamiento
redis = {extras = ["hiredis"], version = "^5.0.1"}
aioredis = "^2.0.1"

# Monitorización y logging
sentry-sdk = "^2.19.2"
prometheus-client = "^0.19.0"
structlog = "^23.2.0"
python-json-logger = "^2.0.7"

# Internacionalización
i18n = "^0.2"
babel = "^2.13.1"

# Utilidades
python-slugify = "^8.0.1"
pytz = "^2023.3"
aiofiles = "^23.2.1"
python-magic = "^0.4.27"
tenacity = "^8.2.3"
aiosqlite = "^0.20.0"
pytest = "^8.3.3"
pytest-asyncio = "^0.24.0"
phonenumbers = "^8.13.50"
aioresponses = "^0.7.7"
testcontainers = "^4.8.2"
docker = "^7.1.0"
ecdsa = "^0.19.0"
anyio = "^4.7.0"
fpdf = "^1.7.2"
streamlit = "^1.41.1"
numpy = "^1.26.4"
pygame = "^2.6.1"
pyopengl = "^3.1.9"
moderngl = "^5.12.0"
glfw = "^2.8.0"
pyrr = "^0.10.3"
pillow = "^10.2.0"
pytrends = "^4.9.2"
matplotlib = "^3.10.0"
requests = "^2.32.3"
urllib3 = "^2.3.0"
joblib = "^1.4.2"
rich = "^13.9.4"
typer = "^0.15.1"
pywhatkit = "^5.4"
textblob = "^0.19.0"
deep-translator = "^1.11.4"
six = "^1.17.0"
ray = "^2.41.0"
langchain = "^0.3.17"
openai = "^1.61.0"
faiss-cpu = "^1.10.0"
pypdf2 = "^3.0.1"
langchain-community = "^0.3.16"
tiktoken = "^0.8.0"
langchain-openai = "^0.3.3"
serpapi = "^0.1.5"
langchain-core = "^0.3.33"
langchain-google-community = "^2.0.4"
icecream = "^2.1.4"
nest-asyncio = "^1.6.0"
fpdf2 = "^2.8.2"
opencv-python = "^4.9.0.80"
pycryptodome = "^3.20.0"
piexif = "^1.1.3"
scapy = "^2.6.1"
pyx = "^0.16"
vpython = "^7.6.5"
cryptography = "^44.0.0"
pylint = "^3.3.4"
boofuzz = "^0.4.2"
python-whois = "^0.9.5"
netifaces = "^0.11.0"
psutil = "^6.1.1"
shodan = "^1.31.0"
pyshark = "^0.6"
ollama = "^0.4.7"
pinecone-client = "^5.0.1"
torch = "2.2.2"
accelerate = ">=0.26.0"
scipy = "^1.15.2"
transformers = "4.48.0"
bitsandbytes = "0.42.0"
optimum = "^1.24.0"
chromadb = "^0.6.3"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^8.3.3"
pytest-asyncio = "^0.24.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-env = "^1.1.1"
pytest-xdist = "^3.3.1"
pytest-sugar = "^0.9.7"
pytest-timeout = "^2.2.0"
factory-boy = "^3.3.0"
faker = "^20.1.0"
coverage = {extras = ["toml"], version = "^7.3.2"}

# Linting y formateo
black = "^24.3.0"
isort = "^5.12.0"
mypy = "^1.7.0"
flake8 = "^6.1.0"
flake8-docstrings = "^1.7.0"
flake8-quotes = "^3.3.2"
flake8-bugbear = "^23.9.16"
pylint = "^3.0.2"
autoflake = "^2.2.1"
bandit = "^1.7.5"

# Herramientas de desarrollo
pre-commit = "^3.5.0"
commitizen = "^3.12.0"
bump2version = "^1.0.1"
safety = "^2.3.5"
pip-audit = "^2.6.1"
debugpy = "^1.8.0"

# Documentación
sphinx = "^7.0.0"
sphinx-rtd-theme = "^1.3.0"
sphinx-autodoc-typehints = "^1.24.0"
furo = "^2023.6.16"
pytest-dotenv = "^0.5.2"


[tool.poetry.group.prod.dependencies]
# Dependencias específicas de producción
gunicorn = "^22.0.0"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
supervisor = "^4.2.5"

[build-system]
requires = ["poetry-core>=1.8.1"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ["py310"]
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
^/docs
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 88
extend_skip = ["docs"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
show_error_codes = true
pretty = true
ignore_missing_imports = true
follow_imports = "silent"
disallow_incomplete_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = """
    -ra -q
    --cov=attendance_system
    --cov-report=html
    --cov-report=xml
    --cov-report=term-missing
    --no-cov-on-fail
    --tb=short
    --strict-markers
    --durations=5
"""
testpaths = ["tests"]
asyncio_mode = "auto"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests"
]

[tool.coverage.run]
branch = true
source = ["attendance_system"]
omit = [
    "tests/*",
    "**/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]

[tool.poetry.scripts]
start = "attendance_system.main:start"
dev = "attendance_system.main:start_dev"
test = "run_tests:main"
lint = "run_lint:main"
format = "run_black:main"
type-check = "run_mypy:main"
security-check = "run_security_check:main"
docs = "build_docs:main"