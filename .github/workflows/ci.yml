name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.10"
  POETRY_VERSION: "1.8.4"
  NODE_VERSION: "20.x"

jobs:
  quality-checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Clona todo el historial del repositorio

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Check .env-development file
        run: ls -la .env-development || echo "El archivo .env-development no existe"

      - name: Create .env-development file
        run: |
          echo "Creating .env-development file..."
          echo "PROJECT_NAME=${{ secrets.PROJECT_NAME }}" >> .env-development
          echo "PROJECT_DESCRIPTION=${{ secrets.PROJECT_DESCRIPTION }}" >> .env-development
          echo "VERSION=${{ secrets.VERSION }}" >> .env-development
          
          echo "API_V1_STR=${{ secrets.API_V1_STR }}" >> .env-development
          echo "BACKEND_CORS_ORIGINS=${{ secrets.BACKEND_CORS_ORIGINS }}" >> .env-development
          echo "ENABLE_METRICS=${{ secrets.ENABLE_METRICS }}" >> .env-development
          
          echo "PROMETHEUS_PORT=${{ secrets.PROMETHEUS_PORT }}" >> .env-development
          echo "GRAFANA_PORT=${{ secrets.GRAFANA_PORT }}" >> .env-development
          echo "GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}" >> .env-development
          
          echo "BACKEND_PORT=${{ secrets.BACKEND_PORT }}" >> .env-development
          echo "ENABLE_WHATSAPP_CALLBACK=${{ secrets.ENABLE_WHATSAPP_CALLBACK }}" >> .env-development
          echo "MOCK_EXTERNAL_SERVICES=${{ secrets.MOCK_EXTERNAL_SERVICES }}" >> .env-development
          
          echo "POSTGRES_SERVER=${{ secrets.POSTGRES_SERVER }}" >> .env-development
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env-development
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env-development
          
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env-development
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> .env-development
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env-development
          
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env-development
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env-development
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env-development
          
          echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> .env-development
          echo "WHATSAPP_CALLBACK_TOKEN=${{ secrets.WHATSAPP_CALLBACK_TOKEN }}" >> .env-development
          echo "WHATSAPP_META_API_KEY=${{ secrets.WHATSAPP_META_API_KEY }}" >> .env-development
        
          echo "WHATSAPP_PROVIDER=${{ secrets.WHATSAPP_PROVIDER }}" >> .env-development
          echo "FRONTEND_PORT=${{ secrets.FRONTEND_PORT }}" >> .env-development
          echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> .env-development
          echo ".env-development file created successfully."

      - name: Check .env-production file
        run: ls -la .env-production || echo "El archivo .env-production no existe"

      - name: Create .env-production file
        run: |
          echo "Creating .env-production file..."
          echo "PROJECT_NAME=${{ secrets.PROJECT_NAME }}" >> .env-production
          echo "PROJECT_DESCRIPTION=${{ secrets.PROJECT_DESCRIPTION }}" >> .env-production
          echo "VERSION=${{ secrets.VERSION }}" >> .env-production

          echo "API_V1_STR=${{ secrets.API_V1_STR }}" >> .env-production
          echo "BACKEND_CORS_ORIGINS=${{ secrets.BACKEND_CORS_ORIGINS }}" >> .env-production
          echo "ENABLE_METRICS=${{ secrets.ENABLE_METRICS }}" >> .env-production

          echo "PROMETHEUS_PORT=${{ secrets.PROMETHEUS_PORT }}" >> .env-production
          echo "GRAFANA_PORT=${{ secrets.GRAFANA_PORT }}" >> .env-production
          echo "GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}" >> .env-production

          echo "BACKEND_PORT=${{ secrets.BACKEND_PORT }}" >> .env-production
          echo "ENABLE_WHATSAPP_CALLBACK=${{ secrets.ENABLE_WHATSAPP_CALLBACK }}" >> .env-production
          echo "MOCK_EXTERNAL_SERVICES=${{ secrets.MOCK_EXTERNAL_SERVICES }}" >> .env-production

          echo "POSTGRES_SERVER=${{ secrets.POSTGRES_SERVER }}" >> .env-production
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env-production
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env-production

          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env-production
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> .env-production
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env-production

          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env-production
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env-production
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env-production

          echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> .env-production
          echo "WHATSAPP_CALLBACK_TOKEN=${{ secrets.WHATSAPP_CALLBACK_TOKEN }}" >> .env-production
          echo "WHATSAPP_META_API_KEY=${{ secrets.WHATSAPP_META_API_KEY }}" >> .env-production

          echo "WHATSAPP_PROVIDER=${{ secrets.WHATSAPP_PROVIDER }}" >> .env-production
          echo "FRONTEND_PORT=${{ secrets.FRONTEND_PORT }}" >> .env-production
          echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> .env-production
          echo ".env-production file created successfully."

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}
          poetry config virtualenvs.create false
          poetry install
          cd frontend && npm ci

      - name: Run linting (with warnings)
        continue-on-error: true  # No falla el build, solo advierte
        run: |
          make lint
          make type-check

      - name: Run unit tests
        run: make tests-unit

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Clona todo el historial del repositorio

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          pip install safety bandit ggshield

      - name: Run security checks
        env:
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
        run: make security-check

  build-images:
    name: Build Docker Images
    needs: [ quality-checks ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Clona todo el contenido del repositorio

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend # Ruta ajustada
          file: ./backend/Dockerfile
          tags: backend-attendance:latest
          load: true

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend # Ruta ajustada
          file: ./frontend/Dockerfile
          tags: frontend-attendance:latest
          load: true

      - name: Save Docker images
        run: |
          mkdir -p /tmp/docker-images
          docker save backend-attendance:latest > /tmp/docker-images/backend.tar
          docker save frontend-attendance:latest > /tmp/docker-images/frontend.tar

  integration-tests:
    name: Integration Tests
    needs: [build-images]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Clona todo el historial del repositorio

      - name: Restore cached images
        uses: actions/cache@v3
        with:
          path: /tmp/docker-images
          key: ${{ runner.os }}-docker-${{ github.sha }}

      - name: Load Docker images
        run: |
          docker load < /tmp/docker-images/frontend.tar
          docker load < /tmp/docker-images/backend.tar

      - name: Start services
        run: docker-compose up -d

      - name: Run integration tests
        run: |
          sleep 30  # Espera a que los servicios estén listos
          make tests-integration

      - name: Run container tests
        run: |
          make test-with-containers-without-stored-procedures-acl-encryption
          make test-with-containers-with-stored-procedures-acl-encryption

  deploy:
    name: Deploy
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to environment
        run: |
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "Deploying to production"
            # Añadir comandos de deploy a producción
          else
            echo "Deploying to staging"
            # Añadir comandos de deploy a staging
          fi