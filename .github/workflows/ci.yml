name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.10"
  POETRY_VERSION: "1.8.4"
  NODE_VERSION: "20.x"

jobs:
  quality-checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry==${{ env.POETRY_VERSION }}
          poetry config virtualenvs.create false
          poetry install
          cd frontend && npm ci

      - name: Run linting (with warnings)
        continue-on-error: true  # No falla el build, solo advierte
        run: |
          make lint
          make type-check

      - name: Run unit tests
        run: make tests-unit

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          pip install safety bandit ggshield

      - name: Run security checks
        env:
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
        run: make security-check

  build-images:
    name: Build Docker Images
    needs: [ quality-checks ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./attendance_system/backend
          file: ./attendance_system/backend/Dockerfile
          tags: backend-attendance:latest
          load: true

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./attendance_system/frontend
          file: ./attendance_system/frontend/Dockerfile
          tags: frontend-attendance:latest
          load: true

      - name: Save Docker images
        run: |
          mkdir -p /tmp/docker-images
          docker save backend-attendance:latest > /tmp/docker-images/backend.tar
          docker save frontend-attendance:latest > /tmp/docker-images/frontend.tar

  integration-tests:
    name: Integration Tests
    needs: [build-images]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Restore cached images
        uses: actions/cache@v3
        with:
          path: /tmp/docker-images
          key: ${{ runner.os }}-docker-${{ github.sha }}

      - name: Load Docker images
        run: |
          docker load < /tmp/docker-images/frontend.tar
          docker load < /tmp/docker-images/backend.tar

      - name: Start services
        run: docker-compose up -d

      - name: Run integration tests
        run: |
          sleep 30  # Espera a que los servicios estén listos
          make tests-integration

      - name: Run container tests
        run: |
          make test-with-containers-without-stored-procedures-acl-encryption
          make test-with-containers-with-stored-procedures-acl-encryption

  deploy:
    name: Deploy
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to environment
        run: |
          if [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "Deploying to production"
            # Añadir comandos de deploy a producción
          else
            echo "Deploying to staging"
            # Añadir comandos de deploy a staging
          fi